const express = require('express'); const bodyParser = require('body-parser'); const cors = require('cors'); const { Client } = require('pg'); const app = express(); app.use(cors()); app.use(bodyParser.json()); const pg = new Client({ connectionString: process.env.DATABASE_URL || 'postgres://mlm_admin:mlm_pass@localhost:5432/mlm' }); pg.connect().catch(e=>console.error(e)); app.get('/health', (req,res)=>res.json({ok:true})); app.post('/payments/create', async (req,res)=>{ try{ const { member_id, product_id, amount_cents, agent_id, channel } = req.body; if(!member_id||!product_id||!amount_cents) return res.status(400).json({error:'missing'}); const { rows } = await pg.query('insert into payments(member_id,product_id,agent_id,amount_cents,channel,status) values($1,$2,$3,$4,$5,$6) returning id,created_at',[member_id,product_id,agent_id||null,amount_cents,channel||'agent_cash','verified']); res.json({ok:true,payment:rows[0]}); }catch(e){console.error(e);res.status(500).json({error:e.message});}}); app.post('/affiliate/verify', async (req,res)=>{ try{ const { member_id, affiliate_id, assistance_type } = req.body; if(!member_id||!affiliate_id) return res.status(400).json({error:'missing'}); const mQ = await pg.query('select id,full_name,status from users where id=$1',[member_id]); if(mQ.rowCount===0) return res.json({valid:false,reason:'not_found'}); const member = mQ.rows[0]; if(member.status!=='active') return res.json({valid:false,reason:'suspended'}); const enrollQ = await pg.query('select p.assistance_types from member_enrollments me join products p on me.product_id=p.id where me.member_id=$1',[member_id]); const eligible = enrollQ.rows.some(r=> (r.assistance_types||'').split(',').map(s=>s.trim()).includes(assistance_type)); if(!eligible) return res.json({valid:true,member:{id:member.id,name:member.full_name},eligible:false,reason:'not_covered'}); return res.json({valid:true,member:{id:member.id,name:member.full_name},eligible:true}); }catch(e){console.error(e);res.status(500).json({error:e.message});}}); app.post('/admin/run-compensation', async (req,res)=>{ try{ // placeholder compensation runner - implement per product logic here console.log('compensation run triggered', req.body); res.json({ok:true}); }catch(e){console.error(e);res.status(500).json({error:e.message});}}); const PORT=process.env.PORT||4000; app.listen(PORT, ()=>console.log('Backend listening on', PORT));